#include <iostream>
#include<stdio.h>

//蛮力算法
int Index(char* chang, char* duan)
{
	int c = 0;
	int d = 0;
	while (c < (int)strlen(chang) && d < (int)strlen(duan))
	{
		if (chang[c] == duan[d])
		{
			c++;
			d++;
		}
		else
		{
			c -= d - 1;
			d = 0;
		}
	}
	return d = strlen(duan) ? c - d : -1;
}

int* getNext(char* duan)
{
	int* next = (int*)calloc(strlen(duan), sizeof(int));

	next[0] = -1;
	int c = 0, d = -1;
	while (c < (int)strlen(duan) - 1) {
		if (d == -1 || duan[c] == duan[d]) {
			c++;
			d++;
			next[c] = (duan[c]!=duan[d]?d:next[d]);
		}
		else {
			d = next[d];
		}
	}
	return next;
}
//KMP算法
int IndexKmp(char* chang, char* duan)
{
	int* next = getNext(duan);
	int c = 0, d = 0;
	while (c < (int)strlen(chang) && d < (int)strlen(duan)){
		if (d == -1 || chang[c] == duan[d]){
			c++;
			d++;
		}
		else{
			d = next[d];
		}
	}
	return d == strlen(duan) ? c - d : -1;
}

int main()
{
	char chang[] = "abababababaacbaabab";
	char duan[] = "babaacba";
	int k = IndexKmp(chang, duan);
	printf("%d", k);
}
