#include<stdio.h>

#define MAXSIZE 50

//直接插入排序
void insertSort(int arr[], int length)
{
	int i, j;
	int temp;
	for (i = 1; i < length; i++)
	{
		temp = arr[i];
		j = i - 1;
		while (j >= 0 && temp < arr[j])
		{
			arr[j + 1] = arr[j];
			j--;
		}
		arr[j + 1] = temp;
	}
}
//冒泡排序
void bubbleSort(int arr[], int n)
{
	int i,j;
	int temp;
	for (i = n; i >= 1; i--)
	{
		for (j = 0; j < n - 1; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}
//快速排序
void quickSort(int arr[], int L, int R)
{
	if (L >= R)
		return;
	int left = L, right = R;
	int pivot = arr[left];
	while (left < right)
	{
		while (left < right && arr[right] >= pivot)
			right--;
		if (left < right)
			arr[left] = arr[right];
		while (left < right && arr[left] < pivot)
			left++;
		if (left < right)
			arr[right] = arr[left];
		if (left >= right)
			arr[left] = pivot;
	}
	quickSort(arr, L, right - 1);
	quickSort(arr, right+ 1 , R);
}
//堆排序
void swap(int arr[], int i, int j)
{
	int temp = arr[i];
	arr[i] = arr[j];
	arr[j] = temp;
}
void heapify(int arr[], int n, int i)
{
	if (i >= n)
		return;
	int c1 = 2 * i + 1;
	int c2 = 2 * i + 2;
	int max = i;
	if (c1<n && arr[c1]>arr[max])
		max = c1;
	if (c2<n && arr[c2]>arr[max])
		max = c2;
	if (max != i)
	{
		swap(arr, max, i);
		heapify(arr, n, max);
	}
}
void build_heap(int arr[], int n)
{
	int i = (n - 2) / 2;
	for (i; i >= 0; i--)
	{
		heapify(arr, n, i);
	}
}
void heapSort(int arr[], int n)
{
	build_heap(arr, n);
	int i;
	for (i = n - 1; i >= 0; i--)
	{
		swap(arr, i, 0);
		heapify(arr, i, 0);
	}
}
//归并排序
void merge(int A[], int left, int mid, int right) {
	int n = 0;
    int i = left;
    int j = mid + 1;
    int tmp[MAXSIZE];
    while (i <= mid && j <= right) {
        if (A[i] <= A[j])
            tmp[n++] = A[i++];
        else
            tmp[n++] = A[j++];
	}
    while (i <= mid)
        tmp[n++] = A[i++];
    while (j <= right)
        tmp[n++] = A[j++];
    int k;
    for (k = left; k < left + n; k++)
        A[k] = tmp[k - left];

}
void merge_sort(int A[], int left, int right) {
    if (left < right) {
        int mid = (left + right) / 2;
        merge_sort(A, left, mid);
        merge_sort(A, mid + 1, right);
        merge(A, left, mid, right);
	}
}
//选择排序
void selectSort(int arr[], int n)
{
	int i, j, k;
	int temp;
	for (i = 0; i < n; i++)
	{
		k = i;
		//从无需序列中挑出一个最小的关键字
		for (j = i + 1; j < n; j++)
		{
			if (arr[k] > arr[j])
				k = j;
		}
		temp = arr[i];
		arr[i] = arr[k];
		arr[k] = temp;
	}
}
//顺序查找
int search(int arr[], int n, int x)
{
	int i;
	for (i = 0; i < n; i++)
	{
		if (arr[i] == x)
			return i;
	}
	return -1;
}
int bsearch(int arr[], int low,int high, int x)
{
	int mid;
	while (low<=high)
	{
		mid = (low + high) / 2;
		if (arr[mid] == x)
			return mid;
		else if (arr[mid] > x)
			high = mid - 1;
		else
			low = mid + 1;
	}
	return -1;
}

void PrintArr(int arr[], int length)
{
	int i;
	for (i = 0; i < length; i++)
	{
		printf("%d ", arr[i]);
	}
}

int main()
{
	int a[] = { 9,8,7,4,5,3,2,1,6 };
	/*insertSort(a,9);
	PrintArr(a,9);*/
	/*bubbleSort(a, 9);
	PrintArr(a, 9);*/
	/*quickSort(a, 0,8);
	PrintArr(a, 9);*/
	/*heapSort(a, 9);
	PrintArr(a, 9);*/
	/*merge_sort(a, 0, 8);
	PrintArr(a,9);*/
	selectSort(a, 9);
	PrintArr(a, 9);
	printf("\n3的下标是:%d", search(a, 9, 3));
	printf("\n3的下标是:%d", bsearch(a, 0, 9, 3));

	return 0;
}
